(import (builtin core)
        (sicp utils))

(include "chapter4-amb.scm")

(eval '(define (multiple-dwelling)
         (let ((cooper (amb 1 2 3 4 5))  ; I have no idea why putting cooper before baker almost halves the runtime
               (baker (amb 1 2 3 4 5)))
           (require (not (= cooper 1)))
           (require (not (= baker 5)))
           (require (not (= cooper baker)))
           (let ((fletcher (amb 1 2 3 4 5)))
             (require (not (= fletcher 5)))
             (require (not (= fletcher 1)))
             (require (not (= fletcher baker)))
             (require (not (= fletcher cooper)))
             (require (not (= (abs (- fletcher cooper)) 1)))
             (let ((miller (amb 1 2 3 4 5)))
              (require (> miller cooper))
              (require (not (= miller baker)))
              (require (not (= miller fletcher)))
              (let ((smith (amb 1 2 3 4 5)))
                (require (not (= smith baker)))
                (require (not (= smith cooper)))
                (require (not (= smith fletcher)))
                (require (not (= smith miller)))
                (require (not (= (abs (- smith fletcher)) 1)))
                (list (list 'baker baker)
                      (list 'cooper cooper)
                      (list 'fletcher fletcher)
                      (list 'miller miller)
                      (list 'smith smith)))))))
      the-global-environment)

(all-solutions '(multiple-dwelling) the-global-environment)
(timeit (lambda () (eval '(multiple-dwelling) the-global-environment)))

(driver-loop)

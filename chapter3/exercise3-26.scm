(import (builtin core)
        (sicp utils))

(define (make-table same-key? smaller-key?)

  (define (entry tree) (car tree))
  (define (left-branch tree) (cadr tree))
  (define (right-branch tree) (caddr tree))
  (define (set-left-branch! tree branch) (set-car! (cdr tree) branch))
  (define (set-right-branch! tree branch) (set-car! (cddr tree) branch))

  (define (get-key entry) (car entry))
  (define (get-value entry) (cdr entry))
  (define (set-value! entry value) (set-cdr! entry value))

  (define (make-tree key value)
    (list (cons key value) '() '()))

  (define (assoc key records)
    (cond ((null? records) false)
          ((same-key? key (get-key (entry records)))
           (entry records))
          ((smaller-key? key (get-key (entry records)))
           (assoc key (left-branch records)))
          (else
            (assoc key (right-branch records)))))

  (define (tree-insert! key value tree)
    (cond ((same-key? key (get-key (entry tree)))
           (set-value! (entry tree) value))
          ((smaller-key? key (get-key (entry tree)))
           (if (null? (left-branch tree))
               (set-left-branch! tree (make-tree key value))
               (tree-insert! key value (left-branch tree))))
          (else
           (if (null? (right-branch tree))
               (set-right-branch! tree (make-tree key value))
               (tree-insert! key value (right-branch tree)))))
    'ok)

  (let ((local-table (list '*table*)))
    (define (lookup key)
      (let ((record (assoc key (cdr local-table))))
        (if record (get-value record) false)))

    (define (insert! key value)
      (if (null? (cdr local-table))
          (set-cdr! local-table (make-tree key value))
          (tree-insert! key value (cdr local-table)))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            ((eq? m 'print) (println local-table))
            (else (error "Unknown operation: TABLE" m))))
    dispatch))

(define (order-lists a b)
  (cond ((and (null? a) (null? b)) 'same)
        ((and (null? a) (not (null? b))) 'less)
        ((and (not (null? a)) (null? b)) 'greater)
        ((< (car a) (car b)) 'less)
        ((> (car a) (car b)) 'greater)
        (else (order-lists (cdr a) (cdr b)))))

(define (less-lists a b)
  (eq? (order-lists a b) 'less))

(define table (make-table equal? less-lists))
(println ((table 'lookup-proc) '(a 1)))
(println ((table 'insert-proc!) '(a 1) 42))
(println ((table 'lookup-proc) '(a 1)))
(println ((table 'insert-proc!) '(a 1) "hi"))
(println ((table 'insert-proc!) '(b 2) "ho"))
(println ((table 'lookup-proc) '(a 1)))
(println ((table 'lookup-proc) '(b 2)))
(println ((table 'lookup-proc) '(a 2)))
(println ((table 'lookup-proc) '(b 1)))

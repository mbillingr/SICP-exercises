(import (builtin core)
        (sicp utils)
        (sicp utils set))

(define (cyclic-list? l)
  (define seen (make-set))
  (define (loop x)
    (cond ((not (pair? x)) (error "not a proper list -- CYCLIC-LIST?" l))
          ((null? (cdr x)) #f)
          ((seen 'contains x) #t)
          (else (seen 'insert x)
                (loop (cdr x)))))
  (loop l))


(define straight '(1 2 3))
(define inf1 (begin (define a (cons 1 '()))
                    (set-cdr! a a)
                    a))
(define inf2 (begin (define a (cons 1 '()))
                    (define b (cons 2 a))
                    (define c (cons 3 b))
                    (set-cdr! a c)
                    c))

(println (cyclic-list? straight))
(println (cyclic-list? inf1))
(println (cyclic-list? inf2))
(println (cyclic-list? '(1 2 3 . 4)))

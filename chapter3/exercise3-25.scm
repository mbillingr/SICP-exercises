(import (builtin core)
        (sicp utils))

(define (make-table same-key?)
  (define (assoc key records)
    (cond ((null? records) false)
          ((same-key? key (caar records)) (car records))
          (else (assoc key (cdr records)))))
  (define (lookup key table)
    (let ((record (assoc key (cdr table))))
      (if record
          (cdr record)
          false)))
  (define (insert! key value table)
    (let ((record (assoc key (cdr table))))
      (if record
          (set-cdr! record value)
          (set-cdr! table
                    (cons (cons key value)
                          (cdr table)))))
    'ok)
  (define (make-table)
    (list '*table*))
  (let ((local-table (make-table)))
    (define (recursive-lookup keys table)
      (if (null? keys)
          table
          (let ((subtable (lookup (car keys) table)))
            (if subtable
                (recursive-lookup (cdr keys) subtable)
                false))))
    (define (recursive-insert! keys value table)
      (if (null? (cdr keys))
          (insert! (car keys) value table)
          (let ((subtable (lookup (car keys) table)))
            (cond (subtable
                    (recursive-insert! (cdr keys) value subtable))
                  (else
                    (let ((new-table (make-table)))
                      (insert! (car keys) new-table table)
                      (recursive-insert! (cdr keys) value new-table)))))))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) (lambda (keys) (recursive-lookup keys local-table)))
            ((eq? m 'insert-proc!) (lambda (keys value) (recursive-insert! keys value local-table)))
            ((eq? m 'print) (println local-table))
            (else (error "Unknown operation: TABLE" m))))
    dispatch))

(define table (make-table equal?))
(println ((table 'lookup-proc) '(a 1)))
(println ((table 'insert-proc!) '(a 1) 42))
(println ((table 'insert-proc!) '(a b c) "hi"))
(println ((table 'lookup-proc) '(a 1)))
(println ((table 'lookup-proc) '(a b c)))

(import (builtin core)
        (sicp utils))

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item)
  (set-car! queue item))
(define (set-rear-ptr! queue item)
  (set-cdr! queue item))

(define (empty-deque? queue)
  (null? (front-ptr queue)))

(define (make-deque) (cons '() '()))

(define (make-entry item prev next)
  (list item prev next))
(define (item-entry entry) (car entry))
(define (prev-entry entry) (cadr entry))
(define (next-entry entry) (caddr entry))
(define (set-prev-entry! entry e) (set-car! (cdr entry) e))
(define (set-next-entry! entry e) (set-car! (cddr entry) e))

(define (front-deque queue)
  (if (empty-deque? queue)
      (error "FRONT called with an empty queue" queue)
      (item-entry (front-ptr queue))))

(define (rear-deque queue)
  (if (empty-deque? queue)
      (error "REAR called with an empty queue" queue)
      (item-entry (rear-ptr queue))))

(define (front-insert-deque! queue item)
  (cond ((empty-deque? queue)
         (let ((new-entry (make-entry item '() '())))
           (set-front-ptr! queue new-entry)
           (set-rear-ptr! queue new-entry)))
        (else
          (let ((new-entry (make-entry item '() (front-ptr queue))))
            (set-prev-entry! (front-ptr queue) new-entry)
            (set-front-ptr! queue new-entry))))
  queue)

(define (rear-insert-deque! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-deque? queue)
           (let ((new-entry (make-entry item '() '())))
             (set-front-ptr! queue new-entry)
             (set-rear-ptr! queue new-entry)))
          (else
            (let ((new-entry (make-entry item (rear-ptr queue) '())))
              (set-next-entry! (rear-ptr queue) new-entry)
              (set-rear-ptr! queue new-entry))))
    queue))

(define (front-delete-deque! queue)
  (cond ((empty-deque? queue)
         (error "DELETE! called with an empty queue" queue))
        (else (set-front-ptr! queue (next-entry (front-ptr queue)))
              (if (null? (front-ptr queue))
                  (set-rear-ptr! queue '())
                  (set-prev-entry! (front-ptr queue) '()))))
  queue)

(define (rear-delete-deque! queue)
  (cond ((empty-deque? queue)
         (error "DELETE! called with an empty queue" queue))
        (else (set-rear-ptr! queue (prev-entry (rear-ptr queue)))
              (if (null? (rear-ptr queue))
                  (set-front-ptr! queue '())
                  (set-next-entry! (rear-ptr queue) '()))))
  queue)

(define (print-deque queue)
  (define (loop entry)
    (cond ((null? entry))
          (else
            (display (item-entry entry))
            (display " ")
            (loop (next-entry entry)))))
  (display "[ ")
  (loop (front-ptr queue))
  (display "]\n"))

(define q1 (make-deque))
(print-deque (rear-insert-deque! q1 'b))
(print-deque (rear-insert-deque! q1 'c))
(print-deque (front-insert-deque! q1 'a))
(print-deque (rear-delete-deque! q1))
(print-deque (front-delete-deque! q1))
(print-deque (rear-delete-deque! q1))
